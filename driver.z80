;; hUGETracker playback routine
;; Written by SuperDisk 2019

include "hardware.inc"
include "constants.inc"
include "debug_macros.inc"

; Constants
STACK_SIZE EQU $200
SCREEN_WIDTH_TILES EQU 20
CANVAS_WIDTH_TILES EQU 32
SCREEN_HEIGHT_TILES EQU 18
CANVAS_HEIGHT_TILES EQU 32

PATTERN_LENGTH EQU 64
TICKS EQU 7

;; Macros


; $0000 - $003F: RST handlers.

SECTION "restarts", ROM0[$0000]
ret
REPT 7
    nop
ENDR
; $0008
ret
REPT 7
    nop
ENDR
; $0010
ret
REPT 7
    nop
ENDR
; $0018
ret
REPT 7
    nop
ENDR
; $0020
ret
REPT 7
    nop
ENDR
; $0028
ret
REPT 7
    nop
ENDR
; $0030
ret
REPT 7
    nop
ENDR
; $0038
ret
REPT 7
    nop
ENDR

; Interrupt addresses
SECTION "Vblank interrupt", ROM0[$0040]
    jp _dosound
    reti

SECTION "LCD controller status interrupt", ROM0[$0048]
    reti

SECTION "Timer overflow interrupt", ROM0[$0050]
    jp _dosound
    reti

SECTION "Serial transfer completion interrupt", ROM0[$0058]
    reti

SECTION "P10-P13 signal low edge interrupt", ROM0[$0060]
    jp _dosound

; Reserved stack space
SECTION "Stack", WRAM0[$d000 - STACK_SIZE]
    ds STACK_SIZE


; Control starts here, but there's more ROM header several bytes later, so the
; only thing we can really do is immediately jump to after the header
SECTION "init", ROM0[$0100]
    nop
    jp $0150

SECTION "romname", ROM0[$0134]
; $0134 - $013E: The title, in upper-case letters, followed by zeroes.
DB "HUGE"
DS 7 ; padding
; $013F - $0142: The manufacturer code. Empty for now
DS 4
DS 1
; $0144 - $0145: "New" Licensee Code, a two character name.
DB "NF"

SECTION "Song Data", ROM0
order_cnt: db 8
order1: dw unreal, lunawaves, lunawaves, unreal
order2: dw lunawaves, unreal, unreal, lunawaves
order3: dw lunawaves
order4: dw

lunawaves:
include "lunawaves.inc"
unreal:
include "unreal.inc"

SECTION "Playback variables", WRAM0
pattern1: dw
pattern2: dw
pattern3: dw
pattern4: dw

current_order: dw

row: ds 1
tick: ds 1

; Initialization
SECTION "main", ROM0[$0150]
jp _init

_paint_tile:
    ld a, b
    ld [hl+], a
    ld a, c
    ld [hl+], a
    ret

_init:
    ; Set LCD palette for grayscale mode; yes, it has a palette
    ld a, %11100100
    ld [$FF00+$47], a

    ;; Fill with pattern
    ld hl, $8000
    ld bc, `10000000
    call _paint_tile
    ld bc, `01000000
    call _paint_tile
    ld bc, `00100000
    call _paint_tile
    ld bc, `00010000
    call _paint_tile
    ld bc, `00001000
    call _paint_tile
    ld bc, `00000100
    call _paint_tile
    ld bc, `00000010
    call _paint_tile
    ld bc, `00000001
    call _paint_tile

    ; Enable sound globally
    ld a, $80
    ldh [rAUDENA], a
    ; Enable channel 1 in stereo
    ld a, $FF
    ldh [rAUDTERM], a
    ; Set volume
    ld a, $77
    ldh [rAUDVOL], a

    ld c, 0 ;; Current order index
    call _refresh_patterns

    ;; Enable the timer
    ld a, TACF_START | TACF_4KHZ
    ld [rTAC], a

    ld a, IEF_VBLANK ; IEF_HILO | IEF_TIMER
    ld [rIE], a
    ei

    jp _halt

_refresh_patterns:
;; Loads pattern registers with pointers to correct pattern based on
;; an order index

;; Call with c set to what order to load
load_pattern: MACRO
    ld hl, 0
    ld l, c
    ld de, \1
    add hl, de

    ld a, [hl+]
    ld [\2], a
    ld a, [hl+]
    ld [\2+1], a
ENDM
    load_pattern order1, pattern1
    load_pattern order2, pattern2
    load_pattern order3, pattern3
    load_pattern order4, pattern4
    ret

_lookup_note:
;; Call with:
;; Pattern pointer in DE

;; Stores note value in H and L

    ld a, [row]

    ld h, 0
    ld l, a
    add hl, de
    ld a, [hl]

    add a, a ;; double it to get index into hi/lo table

    LD     H, 0
    LD     L, A
    LD     DE, note_table
    ADD    HL, DE
    LD     A, [HL]
    INC    HL
    LD     H, [HL]
    LD     L, A
    ret

_playnote1:
;; Call with:
;; Note value in H and L

;; Play a note on channel 1 (square wave)

    ld a, %11111111 ; $10
    ldh [rAUD1LEN], a
    ld a, %11110000
    ldh [rAUD1ENV], a

    ld a, l
    ldh [rAUD1LOW], a
    ld a, h
    or %10000000
    ldh [rAUD1HIGH], a
    ret

_playnote2:
;; Call with:
;; Note value in H and L

;; Play a note on channel 2 (square wave)

    ld a, %00111111 ; $10
    ldh [rAUD2LEN], a
    ld a, %11110000
    ldh [rAUD2ENV], a

    ld a, l
    ldh [rAUD2LOW], a
    ld a, h
    or %10000000
    ldh [rAUD2HIGH], a
    ret

_playnote3:
;; Call with:
;; Note value in H and L

;; Play a note on channel 3 (waveform)

    ; ld a, %10111111 ; $10
    ; ldh [rAUD1LEN], a
    ; ld a, %11110000
    ; ldh [rAUD1ENV], a

    ; ld a, l
    ; ldh [rAUD1LOW], a
    ; ld a, h
    ; or %10000000
    ; ldh [rAUD1HIGH], a
    ret

_playnote4:
;; Call with:
;; Note value in H and L

;; Play a "note" on channel 4 (noise)

    ; ld a, %10111111 ; $10
    ; ldh [rAUD1LEN], a
    ; ld a, %11110000
    ; ldh [rAUD1ENV], a

    ; ld a, l
    ; ldh [rAUD1LOW], a
    ; ld a, h
    ; or %10000000
    ; ldh [rAUD1HIGH], a
    ret

loadShort: MACRO
    ld a, [\1]
    ld \3, a
    ld a, [\1 + 1]
    ld \2, a
ENDM

_dosound:
    ld a, [tick]
    ld c, a
    cp 0
    jp nz, _process_tick

    ;; We're on tick zero, so lookup and play the notes,
    ;; then continue as usual

    loadShort pattern1, d, e
    call _lookup_note
    call _playnote1

    loadShort pattern2, d, e
    call _lookup_note
    call _playnote2

    ; loadShort pattern3, d, e
    ; call _lookup_note
    ; call _playnote

    ; loadShort pattern4, d, e
    ; call _lookup_note
    ; call _playnote

_process_tick:
    ld a, c
    inc a

    cp TICKS ;;TODO: Change to a parameter somewhere
    jp z, _newrow

    ld [tick], a
    reti

_newrow:
    ;; Reset tick to 0
    ld a, 0
    ld [tick], a

    ;; Increment row.
    ld a, [row]
    inc a
    cp PATTERN_LENGTH
    jr nz, noreset
    ;; Increment order and change loaded patterns
    ld a, [order_cnt]
    ld b, a
    ld a, [current_order]
    add a, 2
    cp b
    jp nz, update_current_order
    ld a, 0
update_current_order:
    ld [current_order], a
    ld c, a

    call _refresh_patterns

    ld a, 0
    ld [row], a
    reti

noreset:
    ld [row], a

    reti

_halt:
    ; Do nothing, forever
    halt
    nop
    jr _halt

SECTION "Note Table", ROM0
note_table:
include "music.inc"